Q1. How do you load a CSV file into a Pandas DataFrame?
Use the pd.read_csv('file.csv') function.

Q2. How do you check the data type of a column in a Pandas DataFrame?
Use df['column_name'].dtype to check the data type of a specific column.

Q3. How do you select rows from a Pandas DataFrame based on a condition?
Use boolean indexing: df[df['column_name'] > 5].

Q4. How do you rename columns in a Pandas DataFrame?
Use df.rename(columns={'old_name': 'new_name'}, inplace=True).

Q5. How do you drop columns in a Pandas DataFrame?
Use df.drop(columns=['column_name'], inplace=True).

Q6. How do you find the unique values in a column of a Pandas DataFrame?
Use df['column_name'].unique() to find unique values in a column.

Q7. How do you find the number of missing values in each column of a Pandas DataFrame?
Use df.isnull().sum() to count missing values in each column.

Q8. How do you fill missing values in a Pandas DataFrame with a specific value?
Use df['column_name'].fillna(value, inplace=True).

Q9. How do you concatenate two Pandas DataFrames?
Use pd.concat([df1, df2], axis=0) to concatenate DataFrames vertically.

Q10. How do you merge two Pandas DataFrames on a specific column?
Use pd.merge(df1, df2, on='column_name', how='inner') to merge on a specific column.

Q11. How do you group data in a Pandas DataFrame by a specific column and apply an aggregation function?
Use df.groupby('column_name')['other_column'].mean() for grouping and applying an aggregation function.

Q12. How do you pivot a Pandas DataFrame?
Use pd.pivot_table(df, values='value_column', index='index_column', columns='column_to_pivot') for pivoting.

Q13. How do you change the data type of a column in a Pandas DataFrame?
Use df['column_name'] = df['column_name'].astype('new_dtype') to change the data type.

Q14. How do you sort a Pandas DataFrame by a specific column?
Use df.sort_values(by='column_name', ascending=True) to sort by a specific column.

Q15. How do you create a copy of a Pandas DataFrame?
Use df.copy() to create a copy of the DataFrame.

Q16. How do you filter rows of a Pandas DataFrame by multiple conditions?
Use boolean indexing with multiple conditions: df[(df['column1'] > 5) & (df['column2'] == 'value')].

Q17. How do you calculate the mean of a column in a Pandas DataFrame?
Use df['column_name'].mean() to calculate the mean.

Q18. How do you calculate the standard deviation of a column in a Pandas DataFrame?
Use df['column_name'].std() to calculate the standard deviation.

Q19. How do you calculate the correlation between two columns in a Pandas DataFrame?
Use df['column1'].corr(df['column2']) to calculate correlation.

Q20. How do you select specific columns in a DataFrame using their labels?
Use df[['column1', 'column2']] to select specific columns by labels.

Q21. How do you select specific rows in a DataFrame using their indexes?
Use df.loc[[1, 3, 5]] to select specific rows by indexes.

Q22. How do you sort a DataFrame by a specific column?
Use df.sort_values(by='column_name', ascending=True) to sort by a specific column.

Q23. How do you create a new column in a DataFrame based on the values of another column?
Create a new column by performing operations on an existing column, like df['new_column'] = df['existing_column'] * 2.

Q24. How do you remove duplicates from a DataFrame?
Use df.drop_duplicates() to remove duplicate rows.

Q25. What is the difference between .loc and .iloc in Pandas?

.loc is label-based indexing, used for selecting data by labels.
.iloc is integer-location based indexing, used for selecting data by integer position.